# HERMES AI Voice Agent System - Production Docker Compose
# Optimized for Supabase hosting and enterprise law firm deployments
version: '3.8'

services:
  # Main HERMES Application - Production Configuration
  hermes:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    container_name: hermes-app-prod
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Core Application Settings
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=false
      - DEMO_MODE=false

      # Production Database (Supabase PostgreSQL)
      - DATABASE_URL=${SUPABASE_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}

      # Authentication & Security
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
      - JWT_ALGORITHM=RS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=15
      - REFRESH_TOKEN_EXPIRE_DAYS=7

      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}

      # Supabase Integration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}

      # Voice Processing (Production-optimized)
      - WHISPER_MODEL=${WHISPER_MODEL:-small}
      - WHISPER_DEVICE=cpu
      - KOKORO_API_URL=${KOKORO_API_URL}
      - KOKORO_VOICE=${KOKORO_VOICE:-af_sarah}

      # Audio Configuration
      - SAMPLE_RATE=16000
      - CHUNK_SIZE=2048
      - MAX_AUDIO_LENGTH_SECONDS=60
      - RESPONSE_TIMEOUT=0.05
      - CONFIDENCE_THRESHOLD=0.9

      # Security & Compliance
      - ENABLE_DISCLAIMERS=true
      - AUDIT_LOGGING=true
      - CORS_ALLOW_ORIGINS=${CORS_ALLOW_ORIGINS}

      # Legal Practice Integration
      - CLIO_CLIENT_ID=${CLIO_CLIENT_ID}
      - CLIO_CLIENT_SECRET=${CLIO_CLIENT_SECRET}
      - CLIO_REDIRECT_URI=${CLIO_REDIRECT_URI}
      - CLIO_TOKEN_ENCRYPTION_KEY=${CLIO_TOKEN_ENCRYPTION_KEY}

      # External APIs
      - ZAPIER_API_KEY=${ZAPIER_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - MEM0_API_KEY=${MEM0_API_KEY}

      # Billing & Payments
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PRICE_PRO=${STRIPE_PRICE_PRO}
      - STRIPE_PRICE_ENTERPRISE=${STRIPE_PRICE_ENTERPRISE}
      - STRIPE_OVERAGE_PRICE=${STRIPE_OVERAGE_PRICE}
      - STRIPE_TRIAL_DAYS=14

      # Production Server Configuration
      - WORKERS=8
      - WORKER_CLASS=gevent
      - WORKER_CONNECTIONS=1000
      - MAX_REQUESTS=5000
      - MAX_REQUESTS_JITTER=500
      - TIMEOUT=30
      - KEEPALIVE=2
    volumes:
      # Persistent volumes for production data
      - hermes_logs:/app/logs
      - hermes_data:/app/data
      - hermes_tmp:/app/tmp
    networks:
      - hermes_prod_network
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=200m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Redis Cache for Production (if not using external Redis)
  redis-prod:
    image: redis:7-alpine
    container_name: hermes-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - hermes_prod_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    profiles:
      - with-redis  # Only start if explicitly requested

  # Nginx Reverse Proxy for Production
  nginx-prod:
    image: nginx:1.25-alpine
    container_name: hermes-nginx-prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_prod_logs:/var/log/nginx
      # SSL certificates should be mounted from host or secrets manager
      - ${SSL_CERT_PATH:-./docker/nginx/ssl}:/etc/nginx/ssl:ro
    networks:
      - hermes_prod_network
    depends_on:
      hermes:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus Monitoring for Production
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: hermes-prometheus-prod
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    networks:
      - hermes_prod_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    security_opt:
      - no-new-privileges:true
    profiles:
      - monitoring

  # Log aggregation and analysis
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: hermes-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hermes_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    profiles:
      - logging

  # Centralized logging
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: hermes-logstash
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - hermes_prod_network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  # Log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: hermes-kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - hermes_prod_network
    depends_on:
      - elasticsearch
    profiles:
      - logging

# Production volumes with optimized drivers
volumes:
  hermes_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  hermes_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  hermes_tmp:
    driver: local
  redis_prod_data:
    driver: local
  nginx_prod_logs:
    driver: local
  prometheus_prod_data:
    driver: local
  elasticsearch_data:
    driver: local

# Production network with custom subnet
networks:
  hermes_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: hermes-prod-br0