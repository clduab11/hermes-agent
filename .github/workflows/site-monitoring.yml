name: üìä Site Monitoring & Alerts

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
    - cron: '0 9 * * 1-5'   # Business hours reminder (9 AM weekdays)
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: 'Type of monitoring check'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - uptime
          - performance
          - legal-compliance

jobs:
  # Site uptime monitoring
  uptime-monitoring:
    name: üåê Site Uptime Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.monitoring_type == 'uptime' || github.event.inputs.monitoring_type == 'full' || github.event.inputs.monitoring_type == '' || github.event_name == 'schedule'
    
    steps:
      - name: Check site availability
        run: |
          SITE_URL="https://clduab11.github.io/hermes-agent/"
          echo "üîç Checking HERMES demo site availability..."
          echo "üìç URL: $SITE_URL"
          
          # Multi-point availability check
          ATTEMPTS=3
          SUCCESS_COUNT=0
          CONTENT_CHECK=0
          
          for i in $(seq 1 $ATTEMPTS); do
            echo "üîÑ Attempt $i/$ATTEMPTS"
            HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" --max-time 10 "$SITE_URL")
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" --max-time 10 "$SITE_URL")
            
            echo "  üìä HTTP Status: $HTTP_STATUS"
            echo "  ‚è±Ô∏è  Response Time: ${RESPONSE_TIME}s"
            
            if [ "$HTTP_STATUS" -eq 200 ]; then
              ((SUCCESS_COUNT++))
              echo "  ‚úÖ Success"
              
              # Check if the page contains expected content (React app loaded)
              CONTENT=$(curl -s --max-time 10 "$SITE_URL")
              if echo "$CONTENT" | grep -q "HERMES.*AI.*Voice.*Agent" && echo "$CONTENT" | grep -q "id=\"root\""; then
                echo "  üìã Content verified: React app structure present"
                ((CONTENT_CHECK++))
              else
                echo "  ‚ö†Ô∏è Content issue: Expected HERMES content not found"
              fi
            else
              echo "  ‚ùå Failed (Status: $HTTP_STATUS)"
            fi
            
            [ $i -lt $ATTEMPTS ] && sleep 5
          done
          
          echo ""
          echo "üìä Results: $SUCCESS_COUNT/$ATTEMPTS successful"
          echo "üìã Content checks: $CONTENT_CHECK/$ATTEMPTS passed"
          
          if [ $SUCCESS_COUNT -eq $ATTEMPTS ] && [ $CONTENT_CHECK -eq $ATTEMPTS ]; then
            echo "üéâ Site is fully operational with proper content"
            echo "uptime_status=UP" >> $GITHUB_ENV
          elif [ $SUCCESS_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Site has intermittent issues or content problems"
            echo "uptime_status=DEGRADED" >> $GITHUB_ENV
          else
            echo "üö® Site is DOWN or content is missing"
            echo "uptime_status=DOWN" >> $GITHUB_ENV
            exit 1
          fi

      - name: Professional readiness check
        run: |
          if [ "$uptime_status" = "UP" ]; then
            echo "‚úÖ HERMES demo site ready for professional showcase"
            echo "üíº Site available for LinkedIn demonstrations"
            echo "‚öñÔ∏è Ready to present to legal industry professionals"
          else
            echo "‚ö†Ô∏è Site issues may impact professional presentations"
          fi

  # Performance monitoring
  performance-monitoring:
    name: ‚ö° Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.monitoring_type == 'performance' || github.event.inputs.monitoring_type == 'full' || github.event_name == 'schedule'
    
    steps:
      - name: Performance metrics collection
        run: |
          SITE_URL="https://clduab11.github.io/hermes-agent/"
          echo "‚ö° Collecting performance metrics for HERMES demo..."
          
          # Collect detailed timing metrics
          METRICS=$(curl -o /dev/null -s -w "DNS:%{time_namelookup}\nConnect:%{time_connect}\nTTFB:%{time_starttransfer}\nTotal:%{time_total}\nSize:%{size_download}\nSpeed:%{speed_download}\n" "$SITE_URL")
          
          echo "$METRICS"
          
          # Extract key metrics
          DNS_TIME=$(echo "$METRICS" | grep "DNS:" | cut -d: -f2)
          CONNECT_TIME=$(echo "$METRICS" | grep "Connect:" | cut -d: -f2)
          TTFB=$(echo "$METRICS" | grep "TTFB:" | cut -d: -f2)
          TOTAL_TIME=$(echo "$METRICS" | grep "Total:" | cut -d: -f2)
          SIZE=$(echo "$METRICS" | grep "Size:" | cut -d: -f2)
          
          echo ""
          echo "üìä Performance Analysis:"
          echo "üîç DNS Resolution: ${DNS_TIME}s"
          echo "üîó Connection Time: ${CONNECT_TIME}s"
          echo "üì° Time to First Byte: ${TTFB}s"
          echo "‚è±Ô∏è  Total Load Time: ${TOTAL_TIME}s"
          echo "üì¶ Page Size: ${SIZE} bytes"
          
          # Performance thresholds for professional presentation
          if (( $(echo "$TOTAL_TIME < 2.0" | bc -l) )); then
            echo "‚úÖ Excellent load time - professional ready"
            echo "performance_status=EXCELLENT" >> $GITHUB_ENV
          elif (( $(echo "$TOTAL_TIME < 5.0" | bc -l) )); then
            echo "‚úÖ Good load time - suitable for demos"
            echo "performance_status=GOOD" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Slow load time - may impact professional impression"
            echo "performance_status=SLOW" >> $GITHUB_ENV
          fi

  # Legal compliance monitoring
  legal-compliance-monitoring:
    name: ‚öñÔ∏è Legal Compliance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.monitoring_type == 'legal-compliance' || github.event.inputs.monitoring_type == 'full' || github.event_name == 'schedule'
    
    steps:
      - name: Legal compliance validation
        run: |
          SITE_URL="https://clduab11.github.io/hermes-agent/"
          echo "‚öñÔ∏è Monitoring legal compliance for professional legal tech demo..."
          
          # Fetch site content
          SITE_CONTENT=$(curl -s "$SITE_URL" || echo "Failed to fetch content")
          
          # Check for legal industry positioning
          COMPLIANCE_SCORE=0
          MAX_SCORE=10
          
          echo "üîç Legal Industry Positioning Check:"
          
          if echo "$SITE_CONTENT" | grep -i "hermes\|legal.*tech\|ai.*voice"; then
            echo "‚úÖ HERMES legal tech branding present"
            ((COMPLIANCE_SCORE++))
          fi
          
          if echo "$SITE_CONTENT" | grep -i "law.*firm\|legal.*professional"; then
            echo "‚úÖ Law firm targeting evident"
            ((COMPLIANCE_SCORE++))
          fi
          
          if echo "$SITE_CONTENT" | grep -i "compliance\|hipaa\|gdpr"; then
            echo "‚úÖ Compliance messaging present"
            ((COMPLIANCE_SCORE++))
          fi
          
          if echo "$SITE_CONTENT" | grep -i "cost.*sav\|efficienc\|automat"; then
            echo "‚úÖ Value proposition messaging present"
            ((COMPLIANCE_SCORE++))
          fi
          
          if echo "$SITE_CONTENT" | grep -i "24.*7\|voice.*agent\|ai.*assistant"; then
            echo "‚úÖ Key features highlighted"
            ((COMPLIANCE_SCORE++))
          fi
          
          echo ""
          echo "üìä Legal Compliance Score: $COMPLIANCE_SCORE/$MAX_SCORE"
          
          if [ $COMPLIANCE_SCORE -ge 8 ]; then
            echo "üèÜ Excellent legal industry compliance"
            echo "üíº Ready for LinkedIn professional showcase"
          elif [ $COMPLIANCE_SCORE -ge 5 ]; then
            echo "‚úÖ Good legal industry compliance"
            echo "üíº Suitable for professional demonstration"
          else
            echo "‚ö†Ô∏è Legal industry compliance needs improvement"
          fi

  # Business hours reminder
  business-readiness-alert:
    name: üíº Business Readiness Alert
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 9 * * 1-5'
    
    steps:
      - name: Business readiness check
        run: |
          SITE_URL="https://clduab11.github.io/hermes-agent/"
          echo "üíº HERMES Business Readiness Report - $(date '+%A, %B %d, %Y')"
          echo "=========================================================="
          
          # Quick health check
          HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" --max-time 10 "$SITE_URL" || echo "TIMEOUT")
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" --max-time 10 "$SITE_URL" 2>/dev/null || echo "N/A")
          
          echo "üåê Site Status: $HTTP_STATUS"
          echo "‚ö° Response Time: ${RESPONSE_TIME}s"
          echo "üìç Demo URL: $SITE_URL"
          echo ""
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ HERMES demo site is OPERATIONAL"
            echo "üíº Ready for professional presentations"
            echo "üì± LinkedIn showcase ready"
            echo "‚öñÔ∏è Legal industry demonstration prepared"
            echo ""
            echo "üéØ Key Talking Points for Legal Professionals:"
            echo "   ‚Ä¢ 24/7 AI voice reception for law firms"
            echo "   ‚Ä¢ Significant cost savings vs. human staff"
            echo "   ‚Ä¢ HIPAA/GDPR compliant legal tech solution"
            echo "   ‚Ä¢ Reduces need for overseas outsourcing"
            echo "   ‚Ä¢ Professional client communication automation"
          else
            echo "üö® SITE ISSUE DETECTED"
            echo "‚ùå Demo site may not be accessible for presentations"
            echo "üîß Immediate attention required"
          fi
          
          echo ""
          echo "üìä Professional Readiness: $([ "$HTTP_STATUS" = "200" ] && echo "READY ‚úÖ" || echo "NEEDS ATTENTION ‚ö†Ô∏è")"

  # Generate monitoring summary
  monitoring-summary:
    name: üìã Monitoring Summary
    runs-on: ubuntu-latest
    needs: [uptime-monitoring, performance-monitoring, legal-compliance-monitoring]
    if: always() && (github.event.inputs.monitoring_type == 'full' || github.event.inputs.monitoring_type == '' || github.event_name == 'schedule')
    
    steps:
      - name: Aggregate monitoring results
        run: |
          echo "üìä HERMES Monitoring Summary - $(date)"
          echo "====================================="
          echo ""
          echo "üåê Demo Site: https://clduab11.github.io/hermes-agent/"
          echo "üéØ Purpose: Professional legal tech demonstration"
          echo "üíº Target: Law firm decision-makers and LinkedIn showcase"
          echo ""
          
          # Note: In a real scenario, you'd access the results from previous jobs
          # For now, we'll do a final verification
          SITE_URL="https://clduab11.github.io/hermes-agent/"
          HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" --max-time 10 "$SITE_URL" 2>/dev/null || echo "ERROR")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Overall Status: OPERATIONAL"
            echo "üéâ Professional demonstration ready"
            echo "‚öñÔ∏è Legal industry compliance validated"
            echo "üí∞ Cost-saving value proposition showcased"
          else
            echo "‚ö†Ô∏è Overall Status: NEEDS ATTENTION"
            echo "üîß Professional presentation may be impacted"
          fi
          
          echo ""
          echo "üéØ Next Steps:"
          echo "1. Verify all legal disclaimers are prominent"
          echo "2. Ensure value proposition is clear for law firms"
          echo "3. Validate cost-saving messaging effectiveness"
          echo "4. Confirm professional presentation readiness"

# This workflow provides continuous monitoring to ensure the HERMES demo site
# remains professional and ready for legal industry demonstrations.