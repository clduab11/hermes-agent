name: Deploy HERMES to Production (GCP App Engine)

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  GCP_PROJECT_ID: hermes-legal-ai
  GCP_REGION: us-central1
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: |
          bandit -r hermes/ -f json -o bandit-report.json || true
          bandit -r hermes/ -ll

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest tests/ -v --cov=hermes --cov-report=xml --cov-report=html

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            htmlcov/

  build-and-deploy:
    name: Build and Deploy to GCP App Engine
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
          gcloud config set compute/region ${{ env.GCP_REGION }}

      - name: Verify secrets exist
        run: |
          echo "Checking required secrets..."
          REQUIRED_SECRETS=(
            "SUPABASE_DATABASE_URL"
            "SUPABASE_PROJECT_URL"
            "SUPABASE_SERVICE_KEY"
            "OPENAI_API_KEY"
            "JWT_PRIVATE_KEY"
            "JWT_PUBLIC_KEY"
            "STRIPE_API_KEY"
            "STRIPE_WEBHOOK_SECRET"
            "API_KEY_ENCRYPTION_SECRET"
          )

          for secret in "${REQUIRED_SECRETS[@]}"; do
            if ! gcloud secrets describe "$secret" --project="${{ env.GCP_PROJECT_ID }}" >/dev/null 2>&1; then
              echo "❌ Missing secret: $secret"
              exit 1
            else
              echo "✅ Secret exists: $secret"
            fi
          done

      - name: Update app.yaml for deployment
        run: |
          # Create deployment-specific app.yaml
          sed "s/PROJECT_ID/${{ env.GCP_PROJECT_ID }}/g; s/REGION/${{ env.GCP_REGION }}/g" app.yaml > app-deploy.yaml

          # Add build timestamp
          echo "  BUILD_TIMESTAMP: \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" >> app-deploy.yaml
          echo "  GIT_COMMIT: \"${{ github.sha }}\"" >> app-deploy.yaml
          echo "  GITHUB_RUN_ID: \"${{ github.run_id }}\"" >> app-deploy.yaml

      - name: Validate deployment configuration
        run: |
          python -c "
          import yaml
          with open('app-deploy.yaml', 'r') as f:
              config = yaml.safe_load(f)
          print('✅ app-deploy.yaml is valid YAML')
          print(f'Runtime: {config.get(\"runtime\", \"Not specified\")}')
          print(f'Service: {config.get(\"service\", \"Not specified\")}')
          "

      - name: Deploy to App Engine
        run: |
          echo "🚀 Deploying HERMES to App Engine..."
          gcloud app deploy app-deploy.yaml \
            --project="${{ env.GCP_PROJECT_ID }}" \
            --promote \
            --stop-previous-version \
            --quiet \
            --version="v${{ github.run_number }}"

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."

          # Get the app URL
          APP_URL=$(gcloud app describe --project="${{ env.GCP_PROJECT_ID }}" --format="value(defaultHostname)")
          echo "App URL: https://$APP_URL"

          # Wait for deployment to be ready
          sleep 30

          # Test health endpoint
          if curl -f -s "https://$APP_URL/health" > /dev/null; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

          # Test basic functionality
          if curl -f -s "https://$APP_URL/" > /dev/null; then
            echo "✅ Main page accessible"
          else
            echo "❌ Main page not accessible"
            exit 1
          fi

      - name: Run post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."

          APP_URL=$(gcloud app describe --project="${{ env.GCP_PROJECT_ID }}" --format="value(defaultHostname)")

          # Test API endpoints
          python -c "
          import requests
          import sys

          base_url = 'https://$APP_URL'

          # Test endpoints
          endpoints = [
              '/health',
              '/status',
              '/compliance'
          ]

          for endpoint in endpoints:
              try:
                  response = requests.get(f'{base_url}{endpoint}', timeout=10)
                  if response.status_code == 200:
                      print(f'✅ {endpoint}: OK')
                  else:
                      print(f'❌ {endpoint}: {response.status_code}')
                      sys.exit(1)
              except Exception as e:
                  print(f'❌ {endpoint}: {str(e)}')
                  sys.exit(1)

          print('✅ All post-deployment tests passed')
          "

      - name: Update GitHub deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || "production" }}',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: 'https://${{ env.GCP_PROJECT_ID }}.appspot.com',
              description: 'HERMES deployment to App Engine'
            });

      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🎉 HERMES successfully deployed to production!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ HERMES deployment failed! Check the logs.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Clean up
        if: always()
        run: |
          rm -f app-deploy.yaml

  monitoring-setup:
    name: Configure Monitoring
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure uptime monitoring
        run: |
          echo "🔍 Setting up uptime monitoring..."

          # Create uptime check configuration
          cat > uptime-check.yaml << EOF
          displayName: "HERMES Production Health Check"
          monitoredResource:
            type: "uptime_url"
            labels:
              project_id: "${{ env.GCP_PROJECT_ID }}"
              host: "${{ env.GCP_PROJECT_ID }}.appspot.com"
          httpCheck:
            path: "/health"
            port: 443
            useSsl: true
          period: "60s"
          timeout: "10s"
          EOF

          # Apply uptime check (best effort)
          gcloud alpha monitoring uptime create --config-from-file=uptime-check.yaml --project="${{ env.GCP_PROJECT_ID }}" || echo "Uptime check creation skipped"

      - name: Set up error reporting
        run: |
          echo "📊 Configuring error reporting..."

          # Enable Error Reporting API if not already enabled
          gcloud services enable clouderrorreporting.googleapis.com --project="${{ env.GCP_PROJECT_ID }}"

          echo "✅ Monitoring configuration completed"