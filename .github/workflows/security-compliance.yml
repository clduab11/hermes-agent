name: üîí HERMES Security & Legal Compliance

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2 AM UTC
    - cron: '0 6 * * 1'  # Weekly Monday 6 AM UTC (compliance docs)
  push:
    branches: [ main ]
    paths:
      - 'README.md'
      - 'docs/**'
      - 'hermes/**/*.py'
      - '.github/workflows/security-compliance.yml'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - security-only
          - compliance-only
          - documentation

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  # Comprehensive Security Audit
  security-audit:
    name: üõ°Ô∏è Comprehensive Security Audit
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' || 
      github.event.inputs.scan_type == 'security-only' || 
      github.event.inputs.scan_type == '' || 
      github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep pip-audit || echo "‚ö†Ô∏è Some security tools failed to install"
          npm install -g audit-ci retire || echo "‚ö†Ô∏è Some npm security tools failed"

      - name: Advanced secret scanning
        run: |
          echo "üîç Scanning for secrets and sensitive data..."
          
          # Check for specific legal tech sensitive patterns
          echo "‚öñÔ∏è Legal tech specific pattern check..."
          grep -r -i "client.*confidential\|attorney.*privilege\|hipaa\|gdpr" --include="*.py" . && echo "‚úÖ Legal compliance patterns found" || echo "‚ÑπÔ∏è No explicit legal compliance patterns"
          
          # Check for hardcoded secrets
          if grep -r -E "(api_key|secret|password|token)" --include="*.py" --exclude-dir=".git" . | grep -v "test\|example"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

      - name: Python security analysis
        run: |
          echo "üêç Python security analysis..."
          bandit -r hermes -f json -o bandit-security.json || echo "‚ö†Ô∏è Bandit found security issues"
          bandit -r hermes -f txt || echo "‚ö†Ô∏è Security analysis completed with issues"
          
          echo "üîí Dependency vulnerability scan..."
          pip-audit --format=json --output=pip-audit-results.json --desc || echo "‚ö†Ô∏è Vulnerabilities found"
          pip-audit --format=table || echo "‚ö†Ô∏è Dependency vulnerabilities present"

      - name: Frontend security audit
        working-directory: frontend
        run: |
          echo "üåê Frontend security audit..."
          if [ -f package.json ]; then
            npm install || echo "‚ö†Ô∏è npm install failed"
            npm audit --audit-level moderate --json > npm-audit.json || echo "‚ö†Ô∏è npm audit found issues"
            npm audit --audit-level moderate || echo "‚ö†Ô∏è Frontend vulnerabilities found"
            
            echo "üì¶ Checking for retired packages..."
            npx retire --js --path . --outputformat json --outputpath retire-results.json || echo "‚ö†Ô∏è Retired packages found"
          else
            echo "‚ÑπÔ∏è No package.json found - skipping frontend audit"
          fi

      - name: OWASP security patterns check
        run: |
          echo "üõ°Ô∏è OWASP security patterns check..."
          echo "A01 - Broken Access Control:"
          AUTH_COUNT=$(grep -r "auth\|permission\|access" hermes/ --include="*.py" | wc -l)
          echo "  Authorization patterns found: $AUTH_COUNT"
          
          echo "A02 - Cryptographic Failures:"
          CRYPTO_COUNT=$(grep -r "encrypt\|decrypt\|crypto\|ssl\|tls" hermes/ --include="*.py" | wc -l)
          echo "  Cryptographic patterns found: $CRYPTO_COUNT"
          
          echo "A03 - Injection:"
          INJECTION_COUNT=$(grep -r "sql\|query\|execute" hermes/ --include="*.py" | wc -l)
          echo "  Database query patterns found: $INJECTION_COUNT"

      - name: Generate comprehensive security report
        if: always()
        run: |
          echo "üìä Security Audit Summary" > security-report.md
          echo "========================" >> security-report.md
          echo "" >> security-report.md
          echo "**Generated:** $(date)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "**Critical for Legal Tech:** High security standards required" >> security-report.md
          echo "" >> security-report.md
          
          echo "## üîç Secret Scanning Results" >> security-report.md
          if grep -r -E "(api_key|secret|password|token)" --include="*.py" --exclude-dir=".git" . | grep -v "test\|example" > /dev/null; then
            echo "‚ö†Ô∏è Potential secrets detected - Review required" >> security-report.md
          else
            echo "‚úÖ No hardcoded secrets detected" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## üêç Python Security Analysis" >> security-report.md
          if [ -f bandit-security.json ]; then
            BANDIT_ISSUES=$(cat bandit-security.json | grep -o '"results":\[' | wc -l)
            echo "**Bandit Issues:** $BANDIT_ISSUES" >> security-report.md
          else
            echo "**Bandit Issues:** Analysis failed" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## üì¶ Dependency Vulnerabilities" >> security-report.md
          if [ -f pip-audit-results.json ]; then
            echo "See pip-audit-results.json for detailed Python dependency issues" >> security-report.md
          fi
          if [ -f frontend/npm-audit.json ]; then
            echo "See npm-audit.json for detailed Node.js dependency issues" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## üéØ Security Recommendations" >> security-report.md
          echo "- Store all API keys and secrets in GitHub Secrets or GCP Secret Manager" >> security-report.md
          echo "- Implement comprehensive input validation and sanitization" >> security-report.md
          echo "- Use parameterized queries to prevent SQL injection" >> security-report.md
          echo "- Enable HTTPS-only communication for all endpoints" >> security-report.md
          echo "- Implement rate limiting and access controls" >> security-report.md
          echo "- Regular security dependency updates" >> security-report.md

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            bandit-security.json
            pip-audit-results.json
            frontend/npm-audit.json
            frontend/retire-results.json
            security-report.md
          retention-days: 90

  # Legal Compliance Documentation & Validation
  legal-compliance:
    name: ‚öñÔ∏è Legal Compliance Validation
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' || 
      github.event.inputs.scan_type == 'compliance-only' || 
      github.event.inputs.scan_type == '' || 
      github.event_name == 'schedule' ||
      github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Legal disclaimer verification
        run: |
          echo "‚öñÔ∏è Verifying legal disclaimers and compliance indicators"
          
          # Check for legal disclaimers in key files
          echo "üìã Checking README.md for legal disclaimers..."
          if grep -i "disclaimer\|legal.*advice\|not.*attorney" README.md; then
            echo "‚úÖ Legal disclaimer found in README"
          else
            echo "‚ö†Ô∏è No legal disclaimer in README - CRITICAL for legal tech"
          fi
          
          echo "üìã Checking for privacy policy references..."
          PRIVACY_COUNT=$(find . -name "*.md" -o -name "*.txt" | xargs grep -l -i "privacy.*policy\|data.*protection" | wc -l)
          echo "Privacy policy references found: $PRIVACY_COUNT files"
          
          echo "üìã Checking for terms of service..."
          TERMS_COUNT=$(find . -name "*.md" -o -name "*.txt" | xargs grep -l -i "terms.*service\|terms.*use" | wc -l)
          echo "Terms of service references found: $TERMS_COUNT files"

      - name: HIPAA compliance verification
        run: |
          echo "üè• HIPAA Compliance Verification"
          echo "Checking for HIPAA-related security controls..."
          
          # Check for encryption references
          ENCRYPT_COUNT=$(grep -r -i "encrypt\|aes\|ssl\|tls" hermes/ --include="*.py" | wc -l)
          echo "Encryption references: $ENCRYPT_COUNT"
          
          # Check for audit logging
          AUDIT_COUNT=$(grep -r -i "audit\|log" hermes/ --include="*.py" | wc -l)
          echo "Audit logging references: $AUDIT_COUNT"
          
          # Check for access controls
          ACCESS_COUNT=$(grep -r -i "auth\|permission\|access.*control" hermes/ --include="*.py" | wc -l)
          echo "Access control references: $ACCESS_COUNT"

      - name: GDPR compliance verification
        run: |
          echo "üá™üá∫ GDPR Compliance Verification"
          echo "Checking for GDPR-related privacy controls..."
          
          # Check for data retention policies
          RETENTION_COUNT=$(grep -r -i "retention\|expire\|delete.*data" hermes/ --include="*.py" | wc -l)
          echo "Data retention references: $RETENTION_COUNT"
          
          # Check for consent mechanisms
          CONSENT_COUNT=$(grep -r -i "consent\|opt.*in\|opt.*out" hermes/ --include="*.py" | wc -l)
          echo "Consent mechanism references: $CONSENT_COUNT"
          
          # Check for right to deletion
          DELETION_COUNT=$(grep -r -i "delete.*user\|remove.*data\|right.*forgotten" hermes/ --include="*.py" | wc -l)
          echo "Right to deletion references: $DELETION_COUNT"

      - name: Attorney-client privilege protection check
        run: |
          echo "‚öñÔ∏è Attorney-Client Privilege Protection Check"
          
          # Check for privilege protection references
          PRIVILEGE_COUNT=$(grep -r -i "attorney.*client\|privilege\|confidential" hermes/ --include="*.py" | wc -l)
          echo "Attorney-client privilege references: $PRIVILEGE_COUNT"
          
          # Check for specific legal tech compliance patterns
          LEGAL_TECH_COUNT=$(grep -r -i "legal.*disclaimer\|not.*legal.*advice\|attorney.*client.*relationship" hermes/ --include="*.py" | wc -l)
          echo "Legal tech compliance patterns: $LEGAL_TECH_COUNT"

      - name: Legal disclaimer validation in code
        run: |
          echo "üîç Validating legal disclaimers in codebase..."
          
          # Check Python files for legal disclaimers
          PYTHON_DISCLAIMER_COUNT=$(find hermes/ -name "*.py" | xargs grep -l -i "legal.*disclaimer\|not.*legal.*advice\|attorney.*client" | wc -l)
          echo "üìä Python files with legal disclaimers: $PYTHON_DISCLAIMER_COUNT"
          
          # Check for prohibited language (claiming to provide legal advice)
          if find hermes/ -name "*.py" | xargs grep -i "legal.*advice.*provided\|attorney.*advice.*given\|legal.*counsel" | head -1; then
            echo "‚ùå CRITICAL: Found potentially prohibited language claiming to provide legal advice"
            exit 1
          else
            echo "‚úÖ No prohibited legal advice language found"
          fi

      - name: Generate comprehensive compliance report
        run: |
          echo "‚öñÔ∏è Legal Compliance Status Report" > compliance-report.md
          echo "===================================" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "**Generated:** $(date)" >> compliance-report.md
          echo "**For:** Legal Technology Platform - HERMES" >> compliance-report.md
          echo "**Critical Importance:** Legal industry compliance requirements" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## üìã Legal Disclaimer Status" >> compliance-report.md
          DISCLAIMER_COUNT=$(find . -name "*.md" -o -name "*.txt" | xargs grep -l -i disclaimer | wc -l)
          echo "- Files with legal disclaimers: $DISCLAIMER_COUNT" >> compliance-report.md
          if grep -i "disclaimer\|legal.*advice\|not.*attorney" README.md > /dev/null; then
            echo "- ‚úÖ README.md contains legal disclaimer" >> compliance-report.md
          else
            echo "- ‚ùå README.md missing legal disclaimer - CRITICAL" >> compliance-report.md
          fi
          
          echo "" >> compliance-report.md
          echo "## üè• HIPAA Compliance Indicators" >> compliance-report.md
          ENCRYPT_COUNT=$(grep -r -i "encrypt\|aes\|ssl\|tls" hermes/ --include="*.py" | wc -l)
          AUDIT_COUNT=$(grep -r -i "audit\|log" hermes/ --include="*.py" | wc -l)
          echo "- Encryption references: $ENCRYPT_COUNT" >> compliance-report.md
          echo "- Audit logging references: $AUDIT_COUNT" >> compliance-report.md
          
          echo "" >> compliance-report.md
          echo "## üá™üá∫ GDPR Compliance Indicators" >> compliance-report.md
          RETENTION_COUNT=$(grep -r -i "retention\|expire" hermes/ --include="*.py" | wc -l)
          CONSENT_COUNT=$(grep -r -i "consent\|opt.*in\|opt.*out" hermes/ --include="*.py" | wc -l)
          echo "- Data retention references: $RETENTION_COUNT" >> compliance-report.md
          echo "- Consent mechanism references: $CONSENT_COUNT" >> compliance-report.md
          
          echo "" >> compliance-report.md
          echo "## ‚öñÔ∏è Attorney-Client Privilege Protection" >> compliance-report.md
          PRIVILEGE_COUNT=$(grep -r -i "attorney.*client\|privilege\|confidential" hermes/ --include="*.py" | wc -l)
          echo "- Privilege protection references: $PRIVILEGE_COUNT" >> compliance-report.md
          
          echo "" >> compliance-report.md
          echo "## üéØ Critical Compliance Recommendations" >> compliance-report.md
          echo "1. **MANDATORY:** Ensure legal disclaimers are prominently displayed on all user interfaces" >> compliance-report.md
          echo "2. **HIGH PRIORITY:** Implement comprehensive audit logging for all user interactions" >> compliance-report.md
          echo "3. **REQUIRED:** Document data retention and deletion policies clearly" >> compliance-report.md
          echo "4. **ESSENTIAL:** Provide clear privacy policy and terms of service" >> compliance-report.md
          echo "5. **CRITICAL:** Regular legal compliance reviews with qualified legal counsel" >> compliance-report.md
          echo "6. **IMPORTANT:** Ensure no language claims to provide legal advice" >> compliance-report.md
          echo "7. **NECESSARY:** Implement strong encryption for all client data" >> compliance-report.md

      - name: Upload compliance results
        uses: actions/upload-artifact@v4
        with:
          name: legal-compliance-report
          path: compliance-report.md
          retention-days: 90

  # API Documentation Generation
  documentation-generation:
    name: üìñ API Documentation & Legal Compliance Docs
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' || 
      github.event.inputs.scan_type == 'documentation' || 
      github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn pydantic || echo "‚ö†Ô∏è Some dependencies failed"
          pip install -r requirements-ci.txt || echo "‚ö†Ô∏è Some CI dependencies failed"

      - name: Generate OpenAPI documentation
        run: |
          echo "üìö Generating API documentation..."
          python -c "
          import json
          import sys
          import os
          sys.path.append('.')
          os.environ['OPENAI_API_KEY'] = 'test-key'
          os.environ['DEBUG'] = 'true'
          
          try:
              from hermes.main import app
              openapi_schema = app.openapi()
              
              # Save OpenAPI schema
              with open('api-documentation.json', 'w') as f:
                  json.dump(openapi_schema, f, indent=2)
              
              print('‚úÖ OpenAPI schema generated successfully')
              print(f'üìä API has {len(openapi_schema.get(\"paths\", {}))} endpoints')
              
              # Generate human-readable summary
              with open('api-summary.md', 'w') as f:
                  f.write('# HERMES API Documentation Summary\n\n')
                  f.write(f'**Generated:** {openapi_schema.get(\"openapi\", \"N/A\")} spec\n\n')
                  f.write(f'**Title:** {openapi_schema.get(\"info\", {}).get(\"title\", \"HERMES API\")}\n\n')
                  
                  paths = openapi_schema.get('paths', {})
                  f.write(f'**Total Endpoints:** {len(paths)}\n\n')
                  
                  f.write('## Available Endpoints\n\n')
                  for path, methods in paths.items():
                      for method, details in methods.items():
                          if isinstance(details, dict):
                              summary = details.get('summary', 'No description')
                              f.write(f'- **{method.upper()} {path}**: {summary}\n')
                  
                  f.write('\n## Legal Tech Specific Features\n\n')
                  f.write('- Voice pipeline endpoints for legal AI conversations\n')
                  f.write('- HIPAA/GDPR compliant data handling\n')
                  f.write('- Attorney-client privilege protection\n')
                  f.write('- Legal disclaimer and compliance validation\n')
                  f.write('- Enterprise-grade security and audit logging\n')
              
          except Exception as e:
              print(f'‚ùå Error generating API documentation: {e}')
              # Create fallback documentation
              with open('api-summary.md', 'w') as f:
                  f.write('# HERMES API Documentation\n\n')
                  f.write('**Status:** Documentation generation failed - manual review required\n\n')
                  f.write('## Legal Tech Platform Features\n\n')
                  f.write('- AI Voice Reception for Law Firms\n')
                  f.write('- HIPAA/GDPR Compliant Legal Communication\n')
                  f.write('- Attorney-Client Privilege Protection\n')
                  f.write('- Enterprise Security and Compliance\n')
          "

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: |
            api-documentation.json
            api-summary.md
          retention-days: 30

  # Monitoring Summary
  security-compliance-summary:
    name: üìã Security & Compliance Summary
    runs-on: ubuntu-latest
    needs: [security-audit, legal-compliance, documentation-generation]
    if: always()
    
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "üîí‚öñÔ∏è HERMES Security & Legal Compliance Summary - $(date)"
          echo "============================================================="
          echo ""
          echo "üìä **Security Audit:** ${{ needs.security-audit.result }}"
          echo "‚öñÔ∏è **Legal Compliance:** ${{ needs.legal-compliance.result }}"
          echo "üìñ **Documentation:** ${{ needs.documentation-generation.result }}"
          echo ""
          echo "üéØ **Professional Legal Tech Readiness:**"
          
          if [[ "${{ needs.security-audit.result }}" == "success" && "${{ needs.legal-compliance.result }}" == "success" ]]; then
            echo "‚úÖ **EXCELLENT** - HERMES meets high legal industry standards"
            echo "üèõÔ∏è Ready for professional legal firm demonstrations"
            echo "üíº Suitable for LinkedIn professional showcase"
            echo "‚öñÔ∏è Legal compliance validated for attorney presentations"
            echo "üîí Security standards appropriate for legal industry"
          elif [[ "${{ needs.security-audit.result }}" == "success" || "${{ needs.legal-compliance.result }}" == "success" ]]; then
            echo "‚ö†Ô∏è **GOOD** - HERMES has some compliance gaps to address"
            echo "üîß Review required before professional presentations"
            echo "üìã Some legal or security improvements needed"
          else
            echo "‚ùå **ATTENTION REQUIRED** - Critical issues detected"
            echo "üö® Professional presentation NOT recommended until issues resolved"
            echo "‚öñÔ∏è Legal compliance issues require immediate attention"
            echo "üîí Security vulnerabilities need urgent remediation"
          fi
          
          echo ""
          echo "üìû **Next Steps for Professional Readiness:**"
          echo "1. Review all uploaded security and compliance reports"
          echo "2. Address any critical security vulnerabilities"
          echo "3. Ensure legal disclaimers are prominently displayed"
          echo "4. Validate HIPAA/GDPR compliance implementation"
          echo "5. Confirm attorney-client privilege protection measures"
          echo "6. Schedule legal compliance review with qualified counsel"

      - name: Alert on critical issues
        if: |
          needs.security-audit.result == 'failure' || 
          needs.legal-compliance.result == 'failure'
        run: |
          echo "üö® CRITICAL ISSUES DETECTED üö®"
          echo "‚ùå HERMES is NOT ready for professional legal industry presentation"
          echo "‚öñÔ∏è Legal compliance or security issues require immediate attention"
          echo "üîß Do NOT demonstrate to legal professionals until issues are resolved"
          exit 1