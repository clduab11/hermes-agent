# HERMES AI Voice Agent System - Docker Compose Configuration
# Production-ready containerization for enterprise law firm deployments
version: '3.8'

services:
  # Main HERMES Application
  hermes:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    container_name: hermes-app
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Application Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=${DEBUG:-false}
      - DEMO_MODE=${DEMO_MODE:-false}

      # Database Configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://hermes:hermes_secure_password@postgres:5432/hermes_db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}

      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}

      # JWT Authentication
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-RS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}

      # Voice Configuration
      - WHISPER_MODEL=${WHISPER_MODEL:-base}
      - WHISPER_DEVICE=${WHISPER_DEVICE:-cpu}
      - KOKORO_API_URL=${KOKORO_API_URL:-http://localhost:8001}
      - KOKORO_VOICE=${KOKORO_VOICE:-af_sarah}

      # Audio Settings
      - SAMPLE_RATE=${SAMPLE_RATE:-16000}
      - CHUNK_SIZE=${CHUNK_SIZE:-1024}
      - MAX_AUDIO_LENGTH_SECONDS=${MAX_AUDIO_LENGTH_SECONDS:-30}
      - RESPONSE_TIMEOUT=${RESPONSE_TIMEOUT:-0.1}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.85}

      # Security and Compliance
      - ENABLE_DISCLAIMERS=${ENABLE_DISCLAIMERS:-true}
      - AUDIT_LOGGING=${AUDIT_LOGGING:-true}
      - CORS_ALLOW_ORIGINS=${CORS_ALLOW_ORIGINS}

      # External Service Integration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}

      # Clio Integration
      - CLIO_CLIENT_ID=${CLIO_CLIENT_ID}
      - CLIO_CLIENT_SECRET=${CLIO_CLIENT_SECRET}
      - CLIO_REDIRECT_URI=${CLIO_REDIRECT_URI}
      - CLIO_TOKEN_ENCRYPTION_KEY=${CLIO_TOKEN_ENCRYPTION_KEY}

      # Third-party APIs
      - ZAPIER_API_KEY=${ZAPIER_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - MEM0_API_KEY=${MEM0_API_KEY}

      # Billing Configuration
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PRICE_PRO=${STRIPE_PRICE_PRO}
      - STRIPE_PRICE_ENTERPRISE=${STRIPE_PRICE_ENTERPRISE}
      - STRIPE_OVERAGE_PRICE=${STRIPE_OVERAGE_PRICE}
      - STRIPE_TRIAL_DAYS=${STRIPE_TRIAL_DAYS:-14}
    volumes:
      # Persistent data volumes
      - hermes_logs:/app/logs
      - hermes_data:/app/data
      - hermes_tmp:/app/tmp
    networks:
      - hermes_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hermes-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=hermes_db
      - POSTGRES_USER=hermes
      - POSTGRES_PASSWORD=hermes_secure_password
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hermes_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hermes -d hermes_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hermes-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - hermes_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:1.25-alpine
    container_name: hermes-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      # SSL certificates (mount your certificates here)
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - hermes_network
    depends_on:
      - hermes
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - NET_BIND_SERVICE

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hermes-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hermes_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  hermes_logs:
    driver: local
  hermes_data:
    driver: local
  hermes_tmp:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local

# Custom network for service communication
networks:
  hermes_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16